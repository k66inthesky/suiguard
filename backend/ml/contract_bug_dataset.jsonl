// 擴展的訓練數據集 - 包含原始樣本和變體
// 總樣本數: 66
// 5種漏洞類型 + 1種無漏洞

{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun delete(counter: Counter, ctx: &TxContext) {assert!(counter.owner == ctx.sender());let Counter { id, owner: _, value: _ } = counter;id.delete();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun withdraw(coin: Coin, amount: u64, ctx: &TxContext) { assert!(coin.balance >= amount, 0); coin.balance = coin.balance - amount; }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun claim_reward(caller: address, ctx: &TxContext) { let success = try_transfer_reward(caller); }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_object(ctx: &TxContext): Object { let obj = Object::new(ctx); }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun call_external_mod(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun public_mint(ctx: &TxContext, cap: &MintCap) { transfer_capability(cap, ctx.sender); }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun drop(item: Record, ctx: &TxContext){\n    assert!(item.owner == ctx.sender());let Record{\n     id, owner: _, value: _ } = item;id.drop();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun erase(item: Item, ctx: &TxContext) {assert!(item.owner == ctx.sender());let Item { id, owner: _, value: _ } = item;id.erase();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun drop(item: Item, ctx: &TxContext) {assert!(item.owner == ctx.sender());let Item { id, owner: _, value: _ } = item;id.drop();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun drop(resource: Entity, ctx: &TxContext){\n    assert!(resource.owner == ctx.sender());let Entity{\n     id, owner: _, value: _ } = resource;id.drop();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun drop(item: Data, ctx: &TxContext) {assert!(item.owner == ctx.sender());let Data { id, owner: _, value: _ } = item;id.drop();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun destroy(item: Record, ctx: &TxContext) {assert!(item.owner == ctx.sender());let Record { id, owner: _, value: _ } = item;id.destroy();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun destroy(item: Data, ctx: &TxContext){\n    assert!(item.owner == ctx.sender());let Data{\n     id, owner: _, value: _ } = item;id.destroy();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun drop(count: Data, ctx: &TxContext){\n    assert!(count.owner == ctx.sender());let Data{\n     id, owner: _, value: _ } = count;id.drop();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun erase(record: Resource, ctx: &TxContext) {assert!(record.owner == ctx.sender());let Resource { id, owner: _, value: _ } = record;id.erase();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun drop(count: Item, ctx: &TxContext) {assert!(count.owner == ctx.sender());let Item { id, owner: _, value: _ } = count;id.drop();}", "output": "未發現明顯漏洞"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun extract(asset: Balance, num: u64, ctx: &TxContext){\n     assert!(asset.balance >= num, 0);\n    asset.balance = asset.balance - num;\n    }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun claim(asset: Currency, value: u64, ctx: &TxContext) { assert!(asset.balance >= value, 0); asset.balance = asset.balance - value; }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun take_out(token: Token, total: u64, ctx: &TxContext){\n     assert!(token.balance >= total, 0);\n    token.balance = token.balance - total;\n    }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun pull(money: Token, quantity: u64, ctx: &TxContext) { assert!(money.balance >= quantity, 0); money.balance = money.balance - quantity; }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun claim(balance: Token, sum: u64, ctx: &TxContext) { assert!(balance.balance >= sum, 0); balance.balance = balance.balance - sum; }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun claim(asset: Balance, total: u64, ctx: &TxContext) { assert!(asset.balance >= total, 0); asset.balance = asset.balance - total; }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun take_out(money: Balance, quantity: u64, ctx: &TxContext) { assert!(money.balance >= quantity, 0); money.balance = money.balance - quantity; }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun claim(asset: Currency, quantity: u64, ctx: &TxContext){\n     assert!(asset.balance >= quantity, 0);\n    asset.balance = asset.balance - quantity;\n    }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun take_out(money: Balance, total: u64, ctx: &TxContext){\n     assert!(money.balance >= total, 0);\n    money.balance = money.balance - total;\n    }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun claim(balance: Token, value: u64, ctx: &TxContext){\n     assert!(balance.balance >= value, 0);\n    balance.balance = balance.balance - value;\n    }", "output": "漏洞類型：Arithmetic Overflow，行數：第3行減法運算未做好下溢檢查"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun obtain_reward(sender: address, ctx: &TxContext) { let outcome = try_transfer_reward(sender); }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun get_reward(sender: address, ctx: &TxContext){\n     let ret = try_transfer_reward(sender);\n    }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun receive_bonus(sender: address, ctx: &TxContext) { let outcome = try_transfer_reward(sender); }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun get_reward(user: address, ctx: &TxContext) { let status = try_transfer_reward(user); }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun take_reward(requester: address, ctx: &TxContext){\n     let result = try_transfer_reward(requester);\n    }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun collect_prize(user: address, ctx: &TxContext){\n     let status = try_transfer_reward(user);\n    }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun receive_bonus(account: address, ctx: &TxContext){\n     let flag = try_transfer_reward(account);\n    }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun obtain_reward(user: address, ctx: &TxContext){\n     let flag = try_transfer_reward(user);\n    }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun collect_prize(user: address, ctx: &TxContext) { let ret = try_transfer_reward(user); }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun collect_prize(requester: address, ctx: &TxContext){\n     let status = try_transfer_reward(requester);\n    }", "output": "漏洞類型：Unchecked Return，第2行未檢查try_transfer_reward的回傳值"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_dataect(ctx: &TxContext): Data{\n     let data = Data::new(ctx);\n    }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_itemect(ctx: &TxContext): Item{\n     let item = Item::new(ctx);\n    }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_itemect(ctx: &TxContext): Item{\n     let item = Item::new(ctx);\n    }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_resourceect(ctx: &TxContext): Data{\n     let resource = Data::new(ctx);\n    }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_dataect(ctx: &TxContext): Data { let data = Data::new(ctx); }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_resourceect(ctx: &TxContext): Resource{\n     let resource = Resource::new(ctx);\n    }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_resourceect(ctx: &TxContext): Item{\n     let resource = Item::new(ctx);\n    }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_resourceect(ctx: &TxContext): Resource{\n     let resource = Resource::new(ctx);\n    }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun make_objectect(ctx: &TxContext): Data { let object = Data::new(ctx); }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun init_new_resourceect(ctx: &TxContext): Record{\n     let resource = Record::new(ctx);\n    }", "output": "漏洞類型：Resource Leak，物件創建後未properly移交或銷毀"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun call_outside(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun run_external(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun external_call(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun external_call(ctx: &TxContext){\n     external::change_state();\n    }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun exec_external(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun call_outside(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun exec_external(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun call_outside(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun call_outside(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun external_call(ctx: &TxContext) { external::change_state(); }", "output": "漏洞類型：Cross-Module Pollution，未控管external模組的全局狀態修改權限"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun mint_public(ctx: &TxContext, access: &MintPermission) { transfer_accessability(access, ctx.sender); }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun mint_public(ctx: &TxContext, capability: &CreateAuth){\n     send_capability(capability, ctx.sender);\n    }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun issue_token(ctx: &TxContext, token: &IssueAuth){\n     transfer_tokenability(token, ctx.sender);\n    }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun mint_public(ctx: &TxContext, permission: &MintAuth) { transfer_permissionability(permission, ctx.sender); }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun create_token(ctx: &TxContext, token: &MintAuth){\n     transfer_tokenability(token, ctx.sender);\n    }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun mint_new(ctx: &TxContext, token: &MintPermission) { transfer_tokenability(token, ctx.sender); }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun generate_token(ctx: &TxContext, permission: &CreateAuth){\n     transfer_permissionability(permission, ctx.sender);\n    }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun generate_token(ctx: &TxContext, capability: &MintPermission) { send_capability(capability, ctx.sender); }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun generate_token(ctx: &TxContext, capability: &CreateAuth){\n     grant_capabilityability(capability, ctx.sender);\n    }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}
{"instruction": "找出Sui smart contract的惡意漏洞，並判斷是哪種漏洞類型(5種漏洞(Resource Leak, Arithmetic Overflow, Unchecked Return, Cross-Module Pollution, Capability Leak)或未發現明顯漏洞)，用繁體中文回答", "input": "public fun generate_token(ctx: &TxContext, auth: &CreateAuth){\n     transfer_authability(auth, ctx.sender);\n    }", "output": "漏洞類型：Capability Leak，第2行capability傳遞給未授信對象"}